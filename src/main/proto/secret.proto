// Copyright 2021, Justen Walker
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

option java_package = "tech.justen.concord.goodwill.grpc";
option java_outer_classname = "SecretsProto";
option go_package = "go.justen.tech/goodwill/internal/pb";

package secret;

service SecretService {
  rpc CreateKeyPair(CreateKeyPairRequest) returns (CreateKeyPairResponse) {}
  rpc GenerateKeyPair(SecretParams) returns (CreateKeyPairResponse) {}
  rpc CreateUsernamePassword(CreateUsernamePasswordRequest) returns (CreateSecretResponse) {}
  rpc CreateSecretValue(CreateSecretValueRequest) returns (CreateSecretResponse) {}
  rpc DeleteSecret(DeleteSecretRequest) returns (SecretResponse) {}
  rpc UpdateAccessLevels(UpdateSecretAccessRequest) returns (SecretResponse) {}
  rpc ListAccessLevels(SecretRef) returns (ListAccessEntryResponse) {}
  rpc ExportKeyPairAsFiles(GetSecretRequest) returns (KeyPairFiles) {}
  rpc GetUsernamePassword(GetSecretRequest) returns (UsernamePassword) {}
  rpc ExportAsFile(GetSecretRequest) returns (SecretFile) {}
  rpc ExportAsString(GetSecretRequest) returns (SecretString) {}
  rpc DecryptString(SecretString) returns (SecretString) {}
  rpc EncryptString(EncryptStringRequest) returns (SecretString) {}
}

message SecretRef {
  string orgName = 1;
  string name = 2;
}

message SecretString {
  string str = 1;
}

message SecretFile {
  string file = 1;
}

message SecretParams {
  enum Visibility {
    PUBLIC = 0;
    PRIVATE = 1;
  }
  string orgName = 1;
  string project = 2;
  string name = 3;
  string storePassword = 4;
  bool generatePassword = 5;
  Visibility visibility = 6;
}

message CreateSecretResponse {
  string id = 1;
  string storePassword = 2;
}

message SecretResponse {

}

message ListAccessEntryResponse {
  repeated AccessEntry access = 1;
}

message AccessEntry {
  string teamID = 1;
  string teamName = 2;
  string orgName = 3;
  enum AccessLevel {
    READER = 0;
    WRITER = 1;
    OWNER = 2;
  }
  AccessLevel level = 4;
}

message UpdateSecretAccessRequest {
  string orgName = 1;
  string name = 2;
  repeated AccessEntry entries = 3;
}

message CreateKeyPairResponse {
  string id = 1;
  string storePassword = 2;
  string publicKey = 3;
}

message CreateKeyPairRequest {
  SecretParams options = 1;
  bytes publicKey = 2;
  bytes privateKey = 3;
}

message CreateUsernamePasswordRequest {
  SecretParams options = 1;
  string username = 2;
  string password = 3;
}

message CreateSecretValueRequest {
  SecretParams options = 1;
  bytes value = 2;
}

message DataRequest {
  string org = 1;
  string name = 2;
}

message EncryptStringRequest {
  string org = 1;
  string project = 2;
  string value = 3;
}

message DeleteSecretRequest {
  string org = 1;
  string name = 2;
}

message GetSecretRequest {
  string org = 1;
  string name = 2;
  string storePassword = 3;
}

message KeyPair {
  bytes publicKey = 1;
  bytes privateKey = 2;
}

message KeyPairFiles {
  string publicKeyFile = 1;
  string privateKeyFile = 2;
}

message UsernamePassword {
  string username = 1;
  string password = 2;
}
