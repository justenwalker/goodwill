// +build goodwill

package main

import (
	"context"
	"fmt"
	gw "go.justen.tech/goodwill/gw"
	value "go.justen.tech/goodwill/gw/value"
	"os"
	"os/signal"
	"strings"
)

func dieOnError(err error) {
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
func usage() {
	fmt.Printf("Usage: %s FUNCTION\n", os.Args[0])
	fmt.Println("Functions:")
	fmt.Println("\tContextFunc\tContextFunc takes a context and a task and returns an error")
	fmt.Println("\tContextOutFunc\tContextOutFunc takes a context and a task and returns output variables and an error")
	fmt.Println("\tFunc\tFunc only takes a task and returns an error")
	fmt.Println("\tOutFunc\tOutFunc takes a task and returns output variables and an error")
	os.Exit(128)
}
func main() {
	if len(os.Args) < 2 {
		fmt.Fprintln(os.Stderr, "Must provide a function name")
		usage()
	}
	funcName := os.Args[1]
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	sigCh := make(chan os.Signal)
	signal.Notify(sigCh, os.Interrupt)
	go func() {
		<-sigCh
		cancel()
	}()
	switch strings.ToLower(funcName) {
	case "contextfunc":
		dieOnError(gw.Run(ctx, gw.TaskRunnerFunc(func(ctx context.Context, ts *gw.Task) (map[string]value.Value, error) {
			return nil, ContextFunc(ctx, ts)
		})))
		return
	case "contextoutfunc":
		dieOnError(gw.Run(ctx, gw.TaskRunnerFunc(func(ctx context.Context, ts *gw.Task) (map[string]value.Value, error) {
			return ContextOutFunc(ctx, ts)
		})))
		return
	case "func":
		dieOnError(gw.Run(ctx, gw.TaskRunnerFunc(func(ctx context.Context, ts *gw.Task) (map[string]value.Value, error) {
			return nil, Func(ts)
		})))
		return
	case "outfunc":
		dieOnError(gw.Run(ctx, gw.TaskRunnerFunc(func(ctx context.Context, ts *gw.Task) (map[string]value.Value, error) {
			return OutFunc(ts)
		})))
		return
	}
	fmt.Fprintln(os.Stderr, "Unknown function name:", funcName)
	usage()
}
