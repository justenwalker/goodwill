// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecretServiceClient is the client API for SecretService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretServiceClient interface {
	CreateKeyPair(ctx context.Context, in *CreateKeyPairRequest, opts ...grpc.CallOption) (*CreateKeyPairResponse, error)
	GenerateKeyPair(ctx context.Context, in *SecretParams, opts ...grpc.CallOption) (*CreateKeyPairResponse, error)
	CreateUsernamePassword(ctx context.Context, in *CreateUsernamePasswordRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error)
	CreateSecretValue(ctx context.Context, in *CreateSecretValueRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error)
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*SecretResponse, error)
	UpdateAccessLevels(ctx context.Context, in *UpdateSecretAccessRequest, opts ...grpc.CallOption) (*SecretResponse, error)
	ListAccessLevels(ctx context.Context, in *SecretRef, opts ...grpc.CallOption) (*ListAccessEntryResponse, error)
	ExportKeyPairAsFiles(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*KeyPairFiles, error)
	GetUsernamePassword(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*UsernamePassword, error)
	ExportAsFile(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*SecretFile, error)
	ExportAsString(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*SecretString, error)
	DecryptString(ctx context.Context, in *SecretString, opts ...grpc.CallOption) (*SecretString, error)
	EncryptString(ctx context.Context, in *EncryptStringRequest, opts ...grpc.CallOption) (*SecretString, error)
}

type secretServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretServiceClient(cc grpc.ClientConnInterface) SecretServiceClient {
	return &secretServiceClient{cc}
}

func (c *secretServiceClient) CreateKeyPair(ctx context.Context, in *CreateKeyPairRequest, opts ...grpc.CallOption) (*CreateKeyPairResponse, error) {
	out := new(CreateKeyPairResponse)
	err := c.cc.Invoke(ctx, "/secret.SecretService/CreateKeyPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) GenerateKeyPair(ctx context.Context, in *SecretParams, opts ...grpc.CallOption) (*CreateKeyPairResponse, error) {
	out := new(CreateKeyPairResponse)
	err := c.cc.Invoke(ctx, "/secret.SecretService/GenerateKeyPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) CreateUsernamePassword(ctx context.Context, in *CreateUsernamePasswordRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error) {
	out := new(CreateSecretResponse)
	err := c.cc.Invoke(ctx, "/secret.SecretService/CreateUsernamePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) CreateSecretValue(ctx context.Context, in *CreateSecretValueRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error) {
	out := new(CreateSecretResponse)
	err := c.cc.Invoke(ctx, "/secret.SecretService/CreateSecretValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*SecretResponse, error) {
	out := new(SecretResponse)
	err := c.cc.Invoke(ctx, "/secret.SecretService/DeleteSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) UpdateAccessLevels(ctx context.Context, in *UpdateSecretAccessRequest, opts ...grpc.CallOption) (*SecretResponse, error) {
	out := new(SecretResponse)
	err := c.cc.Invoke(ctx, "/secret.SecretService/UpdateAccessLevels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) ListAccessLevels(ctx context.Context, in *SecretRef, opts ...grpc.CallOption) (*ListAccessEntryResponse, error) {
	out := new(ListAccessEntryResponse)
	err := c.cc.Invoke(ctx, "/secret.SecretService/ListAccessLevels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) ExportKeyPairAsFiles(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*KeyPairFiles, error) {
	out := new(KeyPairFiles)
	err := c.cc.Invoke(ctx, "/secret.SecretService/ExportKeyPairAsFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) GetUsernamePassword(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*UsernamePassword, error) {
	out := new(UsernamePassword)
	err := c.cc.Invoke(ctx, "/secret.SecretService/GetUsernamePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) ExportAsFile(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*SecretFile, error) {
	out := new(SecretFile)
	err := c.cc.Invoke(ctx, "/secret.SecretService/ExportAsFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) ExportAsString(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*SecretString, error) {
	out := new(SecretString)
	err := c.cc.Invoke(ctx, "/secret.SecretService/ExportAsString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) DecryptString(ctx context.Context, in *SecretString, opts ...grpc.CallOption) (*SecretString, error) {
	out := new(SecretString)
	err := c.cc.Invoke(ctx, "/secret.SecretService/DecryptString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) EncryptString(ctx context.Context, in *EncryptStringRequest, opts ...grpc.CallOption) (*SecretString, error) {
	out := new(SecretString)
	err := c.cc.Invoke(ctx, "/secret.SecretService/EncryptString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretServiceServer is the server API for SecretService service.
// All implementations must embed UnimplementedSecretServiceServer
// for forward compatibility
type SecretServiceServer interface {
	CreateKeyPair(context.Context, *CreateKeyPairRequest) (*CreateKeyPairResponse, error)
	GenerateKeyPair(context.Context, *SecretParams) (*CreateKeyPairResponse, error)
	CreateUsernamePassword(context.Context, *CreateUsernamePasswordRequest) (*CreateSecretResponse, error)
	CreateSecretValue(context.Context, *CreateSecretValueRequest) (*CreateSecretResponse, error)
	DeleteSecret(context.Context, *DeleteSecretRequest) (*SecretResponse, error)
	UpdateAccessLevels(context.Context, *UpdateSecretAccessRequest) (*SecretResponse, error)
	ListAccessLevels(context.Context, *SecretRef) (*ListAccessEntryResponse, error)
	ExportKeyPairAsFiles(context.Context, *GetSecretRequest) (*KeyPairFiles, error)
	GetUsernamePassword(context.Context, *GetSecretRequest) (*UsernamePassword, error)
	ExportAsFile(context.Context, *GetSecretRequest) (*SecretFile, error)
	ExportAsString(context.Context, *GetSecretRequest) (*SecretString, error)
	DecryptString(context.Context, *SecretString) (*SecretString, error)
	EncryptString(context.Context, *EncryptStringRequest) (*SecretString, error)
	mustEmbedUnimplementedSecretServiceServer()
}

// UnimplementedSecretServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecretServiceServer struct {
}

func (UnimplementedSecretServiceServer) CreateKeyPair(context.Context, *CreateKeyPairRequest) (*CreateKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyPair not implemented")
}
func (UnimplementedSecretServiceServer) GenerateKeyPair(context.Context, *SecretParams) (*CreateKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKeyPair not implemented")
}
func (UnimplementedSecretServiceServer) CreateUsernamePassword(context.Context, *CreateUsernamePasswordRequest) (*CreateSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsernamePassword not implemented")
}
func (UnimplementedSecretServiceServer) CreateSecretValue(context.Context, *CreateSecretValueRequest) (*CreateSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecretValue not implemented")
}
func (UnimplementedSecretServiceServer) DeleteSecret(context.Context, *DeleteSecretRequest) (*SecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedSecretServiceServer) UpdateAccessLevels(context.Context, *UpdateSecretAccessRequest) (*SecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessLevels not implemented")
}
func (UnimplementedSecretServiceServer) ListAccessLevels(context.Context, *SecretRef) (*ListAccessEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessLevels not implemented")
}
func (UnimplementedSecretServiceServer) ExportKeyPairAsFiles(context.Context, *GetSecretRequest) (*KeyPairFiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportKeyPairAsFiles not implemented")
}
func (UnimplementedSecretServiceServer) GetUsernamePassword(context.Context, *GetSecretRequest) (*UsernamePassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsernamePassword not implemented")
}
func (UnimplementedSecretServiceServer) ExportAsFile(context.Context, *GetSecretRequest) (*SecretFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportAsFile not implemented")
}
func (UnimplementedSecretServiceServer) ExportAsString(context.Context, *GetSecretRequest) (*SecretString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportAsString not implemented")
}
func (UnimplementedSecretServiceServer) DecryptString(context.Context, *SecretString) (*SecretString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptString not implemented")
}
func (UnimplementedSecretServiceServer) EncryptString(context.Context, *EncryptStringRequest) (*SecretString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptString not implemented")
}
func (UnimplementedSecretServiceServer) mustEmbedUnimplementedSecretServiceServer() {}

// UnsafeSecretServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretServiceServer will
// result in compilation errors.
type UnsafeSecretServiceServer interface {
	mustEmbedUnimplementedSecretServiceServer()
}

func RegisterSecretServiceServer(s grpc.ServiceRegistrar, srv SecretServiceServer) {
	s.RegisterService(&SecretService_ServiceDesc, srv)
}

func _SecretService_CreateKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).CreateKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretService/CreateKeyPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).CreateKeyPair(ctx, req.(*CreateKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_GenerateKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).GenerateKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretService/GenerateKeyPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).GenerateKeyPair(ctx, req.(*SecretParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_CreateUsernamePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsernamePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).CreateUsernamePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretService/CreateUsernamePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).CreateUsernamePassword(ctx, req.(*CreateUsernamePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_CreateSecretValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).CreateSecretValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretService/CreateSecretValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).CreateSecretValue(ctx, req.(*CreateSecretValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretService/DeleteSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_UpdateAccessLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecretAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).UpdateAccessLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretService/UpdateAccessLevels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).UpdateAccessLevels(ctx, req.(*UpdateSecretAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_ListAccessLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).ListAccessLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretService/ListAccessLevels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).ListAccessLevels(ctx, req.(*SecretRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_ExportKeyPairAsFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).ExportKeyPairAsFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretService/ExportKeyPairAsFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).ExportKeyPairAsFiles(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_GetUsernamePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).GetUsernamePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretService/GetUsernamePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).GetUsernamePassword(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_ExportAsFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).ExportAsFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretService/ExportAsFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).ExportAsFile(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_ExportAsString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).ExportAsString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretService/ExportAsString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).ExportAsString(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_DecryptString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).DecryptString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretService/DecryptString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).DecryptString(ctx, req.(*SecretString))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_EncryptString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).EncryptString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretService/EncryptString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).EncryptString(ctx, req.(*EncryptStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretService_ServiceDesc is the grpc.ServiceDesc for SecretService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "secret.SecretService",
	HandlerType: (*SecretServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKeyPair",
			Handler:    _SecretService_CreateKeyPair_Handler,
		},
		{
			MethodName: "GenerateKeyPair",
			Handler:    _SecretService_GenerateKeyPair_Handler,
		},
		{
			MethodName: "CreateUsernamePassword",
			Handler:    _SecretService_CreateUsernamePassword_Handler,
		},
		{
			MethodName: "CreateSecretValue",
			Handler:    _SecretService_CreateSecretValue_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _SecretService_DeleteSecret_Handler,
		},
		{
			MethodName: "UpdateAccessLevels",
			Handler:    _SecretService_UpdateAccessLevels_Handler,
		},
		{
			MethodName: "ListAccessLevels",
			Handler:    _SecretService_ListAccessLevels_Handler,
		},
		{
			MethodName: "ExportKeyPairAsFiles",
			Handler:    _SecretService_ExportKeyPairAsFiles_Handler,
		},
		{
			MethodName: "GetUsernamePassword",
			Handler:    _SecretService_GetUsernamePassword_Handler,
		},
		{
			MethodName: "ExportAsFile",
			Handler:    _SecretService_ExportAsFile_Handler,
		},
		{
			MethodName: "ExportAsString",
			Handler:    _SecretService_ExportAsString_Handler,
		},
		{
			MethodName: "DecryptString",
			Handler:    _SecretService_DecryptString_Handler,
		},
		{
			MethodName: "EncryptString",
			Handler:    _SecretService_EncryptString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret.proto",
}
