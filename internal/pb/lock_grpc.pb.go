// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LockServiceClient is the client API for LockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LockServiceClient interface {
	ProjectLock(ctx context.Context, in *Lock, opts ...grpc.CallOption) (*LockResult, error)
	ProjectUnlock(ctx context.Context, in *Lock, opts ...grpc.CallOption) (*LockResult, error)
}

type lockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLockServiceClient(cc grpc.ClientConnInterface) LockServiceClient {
	return &lockServiceClient{cc}
}

func (c *lockServiceClient) ProjectLock(ctx context.Context, in *Lock, opts ...grpc.CallOption) (*LockResult, error) {
	out := new(LockResult)
	err := c.cc.Invoke(ctx, "/lock.LockService/ProjectLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockServiceClient) ProjectUnlock(ctx context.Context, in *Lock, opts ...grpc.CallOption) (*LockResult, error) {
	out := new(LockResult)
	err := c.cc.Invoke(ctx, "/lock.LockService/ProjectUnlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LockServiceServer is the server API for LockService service.
// All implementations must embed UnimplementedLockServiceServer
// for forward compatibility
type LockServiceServer interface {
	ProjectLock(context.Context, *Lock) (*LockResult, error)
	ProjectUnlock(context.Context, *Lock) (*LockResult, error)
	mustEmbedUnimplementedLockServiceServer()
}

// UnimplementedLockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLockServiceServer struct {
}

func (UnimplementedLockServiceServer) ProjectLock(context.Context, *Lock) (*LockResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectLock not implemented")
}
func (UnimplementedLockServiceServer) ProjectUnlock(context.Context, *Lock) (*LockResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectUnlock not implemented")
}
func (UnimplementedLockServiceServer) mustEmbedUnimplementedLockServiceServer() {}

// UnsafeLockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LockServiceServer will
// result in compilation errors.
type UnsafeLockServiceServer interface {
	mustEmbedUnimplementedLockServiceServer()
}

func RegisterLockServiceServer(s grpc.ServiceRegistrar, srv LockServiceServer) {
	s.RegisterService(&LockService_ServiceDesc, srv)
}

func _LockService_ProjectLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).ProjectLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lock.LockService/ProjectLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).ProjectLock(ctx, req.(*Lock))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockService_ProjectUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).ProjectUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lock.LockService/ProjectUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).ProjectUnlock(ctx, req.(*Lock))
	}
	return interceptor(ctx, in, info, handler)
}

// LockService_ServiceDesc is the grpc.ServiceDesc for LockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lock.LockService",
	HandlerType: (*LockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProjectLock",
			Handler:    _LockService_ProjectLock_Handler,
		},
		{
			MethodName: "ProjectUnlock",
			Handler:    _LockService_ProjectUnlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lock.proto",
}
