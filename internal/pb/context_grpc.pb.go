// Copyright 2021, Justen Walker
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: context.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContextService_GetVariable_FullMethodName      = "/context.ContextService/GetVariable"
	ContextService_SetVariable_FullMethodName      = "/context.ContextService/SetVariable"
	ContextService_SetVariables_FullMethodName     = "/context.ContextService/SetVariables"
	ContextService_SetTaskResult_FullMethodName    = "/context.ContextService/SetTaskResult"
	ContextService_GetVariableNames_FullMethodName = "/context.ContextService/GetVariableNames"
	ContextService_GetVariables_FullMethodName     = "/context.ContextService/GetVariables"
	ContextService_Evaluate_FullMethodName         = "/context.ContextService/Evaluate"
)

// ContextServiceClient is the client API for ContextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContextServiceClient interface {
	GetVariable(ctx context.Context, in *VariableName, opts ...grpc.CallOption) (*Value, error)
	SetVariable(ctx context.Context, in *Variable, opts ...grpc.CallOption) (*SetVariableResult, error)
	SetVariables(ctx context.Context, in *Variables, opts ...grpc.CallOption) (*SetVariableResult, error)
	SetTaskResult(ctx context.Context, in *Variables, opts ...grpc.CallOption) (*SetVariableResult, error)
	GetVariableNames(ctx context.Context, in *GetVariableNameParams, opts ...grpc.CallOption) (*VariableNameList, error)
	GetVariables(ctx context.Context, in *GetVariablesRequest, opts ...grpc.CallOption) (*MapValue, error)
	Evaluate(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (*Value, error)
}

type contextServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContextServiceClient(cc grpc.ClientConnInterface) ContextServiceClient {
	return &contextServiceClient{cc}
}

func (c *contextServiceClient) GetVariable(ctx context.Context, in *VariableName, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, ContextService_GetVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) SetVariable(ctx context.Context, in *Variable, opts ...grpc.CallOption) (*SetVariableResult, error) {
	out := new(SetVariableResult)
	err := c.cc.Invoke(ctx, ContextService_SetVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) SetVariables(ctx context.Context, in *Variables, opts ...grpc.CallOption) (*SetVariableResult, error) {
	out := new(SetVariableResult)
	err := c.cc.Invoke(ctx, ContextService_SetVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) SetTaskResult(ctx context.Context, in *Variables, opts ...grpc.CallOption) (*SetVariableResult, error) {
	out := new(SetVariableResult)
	err := c.cc.Invoke(ctx, ContextService_SetTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) GetVariableNames(ctx context.Context, in *GetVariableNameParams, opts ...grpc.CallOption) (*VariableNameList, error) {
	out := new(VariableNameList)
	err := c.cc.Invoke(ctx, ContextService_GetVariableNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) GetVariables(ctx context.Context, in *GetVariablesRequest, opts ...grpc.CallOption) (*MapValue, error) {
	out := new(MapValue)
	err := c.cc.Invoke(ctx, ContextService_GetVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) Evaluate(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, ContextService_Evaluate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContextServiceServer is the server API for ContextService service.
// All implementations must embed UnimplementedContextServiceServer
// for forward compatibility
type ContextServiceServer interface {
	GetVariable(context.Context, *VariableName) (*Value, error)
	SetVariable(context.Context, *Variable) (*SetVariableResult, error)
	SetVariables(context.Context, *Variables) (*SetVariableResult, error)
	SetTaskResult(context.Context, *Variables) (*SetVariableResult, error)
	GetVariableNames(context.Context, *GetVariableNameParams) (*VariableNameList, error)
	GetVariables(context.Context, *GetVariablesRequest) (*MapValue, error)
	Evaluate(context.Context, *EvaluateRequest) (*Value, error)
	mustEmbedUnimplementedContextServiceServer()
}

// UnimplementedContextServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContextServiceServer struct {
}

func (UnimplementedContextServiceServer) GetVariable(context.Context, *VariableName) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariable not implemented")
}
func (UnimplementedContextServiceServer) SetVariable(context.Context, *Variable) (*SetVariableResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVariable not implemented")
}
func (UnimplementedContextServiceServer) SetVariables(context.Context, *Variables) (*SetVariableResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVariables not implemented")
}
func (UnimplementedContextServiceServer) SetTaskResult(context.Context, *Variables) (*SetVariableResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskResult not implemented")
}
func (UnimplementedContextServiceServer) GetVariableNames(context.Context, *GetVariableNameParams) (*VariableNameList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariableNames not implemented")
}
func (UnimplementedContextServiceServer) GetVariables(context.Context, *GetVariablesRequest) (*MapValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariables not implemented")
}
func (UnimplementedContextServiceServer) Evaluate(context.Context, *EvaluateRequest) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Evaluate not implemented")
}
func (UnimplementedContextServiceServer) mustEmbedUnimplementedContextServiceServer() {}

// UnsafeContextServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContextServiceServer will
// result in compilation errors.
type UnsafeContextServiceServer interface {
	mustEmbedUnimplementedContextServiceServer()
}

func RegisterContextServiceServer(s grpc.ServiceRegistrar, srv ContextServiceServer) {
	s.RegisterService(&ContextService_ServiceDesc, srv)
}

func _ContextService_GetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).GetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_GetVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).GetVariable(ctx, req.(*VariableName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_SetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Variable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).SetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_SetVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).SetVariable(ctx, req.(*Variable))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_SetVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Variables)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).SetVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_SetVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).SetVariables(ctx, req.(*Variables))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_SetTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Variables)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).SetTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_SetTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).SetTaskResult(ctx, req.(*Variables))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_GetVariableNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariableNameParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).GetVariableNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_GetVariableNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).GetVariableNames(ctx, req.(*GetVariableNameParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_GetVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).GetVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_GetVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).GetVariables(ctx, req.(*GetVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_Evaluate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).Evaluate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_Evaluate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).Evaluate(ctx, req.(*EvaluateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContextService_ServiceDesc is the grpc.ServiceDesc for ContextService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContextService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "context.ContextService",
	HandlerType: (*ContextServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVariable",
			Handler:    _ContextService_GetVariable_Handler,
		},
		{
			MethodName: "SetVariable",
			Handler:    _ContextService_SetVariable_Handler,
		},
		{
			MethodName: "SetVariables",
			Handler:    _ContextService_SetVariables_Handler,
		},
		{
			MethodName: "SetTaskResult",
			Handler:    _ContextService_SetTaskResult_Handler,
		},
		{
			MethodName: "GetVariableNames",
			Handler:    _ContextService_GetVariableNames_Handler,
		},
		{
			MethodName: "GetVariables",
			Handler:    _ContextService_GetVariables_Handler,
		},
		{
			MethodName: "Evaluate",
			Handler:    _ContextService_Evaluate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "context.proto",
}
